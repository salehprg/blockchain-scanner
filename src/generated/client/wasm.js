
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BlockchainConfigsScalarFieldEnum = {
  id: 'id',
  chainId: 'chainId',
  rpcUrlBase: 'rpcUrlBase',
  rpcUrlAlter: 'rpcUrlAlter'
};

exports.Prisma.BlockchainContractsScalarFieldEnum = {
  id: 'id',
  contractAddress: 'contractAddress',
  contractType: 'contractType',
  chainId: 'chainId',
  lastSyncBlock: 'lastSyncBlock',
  lastSyncTime: 'lastSyncTime'
};

exports.Prisma.NFTOwnersScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  ownerAddress: 'ownerAddress',
  contractAddress: 'contractAddress',
  tokenId: 'tokenId',
  count: 'count',
  lastTransactionHash: 'lastTransactionHash',
  lastSyncTime: 'lastSyncTime'
};

exports.Prisma.ContractLogsScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  chainId: 'chainId',
  contractAddress: 'contractAddress',
  blockNumber: 'blockNumber',
  transactionHash: 'transactionHash',
  logIndex: 'logIndex',
  eventType: 'eventType',
  fromAddress: 'fromAddress',
  toAddress: 'toAddress',
  operatorAddress: 'operatorAddress',
  tokenId: 'tokenId',
  value: 'value',
  loggedAt: 'loggedAt'
};

exports.Prisma.NFTsScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  contractAddress: 'contractAddress',
  tokenId: 'tokenId',
  tokenUri: 'tokenUri',
  metadataUpdated: 'metadataUpdated',
  lastMetadataSyncTime: 'lastMetadataSyncTime',
  name: 'name',
  description: 'description',
  image: 'image',
  externalUrl: 'externalUrl',
  attributes: 'attributes',
  raw: 'raw'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  BlockchainConfigs: 'BlockchainConfigs',
  BlockchainContracts: 'BlockchainContracts',
  NFTOwners: 'NFTOwners',
  ContractLogs: 'ContractLogs',
  NFTs: 'NFTs'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "G:\\Project\\Funtooction\\blockchain-scanner\\src\\generated\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "G:\\Project\\Funtooction\\blockchain-scanner\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// Prisma schema to mirror existing database tables (no migrations generated here).\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel BlockchainConfigs {\n  id          String  @id @default(uuid()) @db.Uuid\n  chainId     Int     @unique\n  rpcUrlBase  String  @db.Text\n  rpcUrlAlter String? @db.Text\n\n  @@map(\"BlockchainConfigs\")\n}\n\nmodel BlockchainContracts {\n  id              String    @id @default(uuid()) @db.Uuid\n  contractAddress String    @unique @db.VarChar(100)\n  contractType    String    @db.VarChar(20)\n  chainId         Int\n  lastSyncBlock   String?   @db.Text\n  lastSyncTime    DateTime? @db.Timestamptz\n\n  @@map(\"BlockchainContracts\")\n}\n\nmodel NFTOwners {\n  id                  String    @id @default(uuid()) @db.Uuid\n  contractId          String    @db.Uuid\n  ownerAddress        String    @db.VarChar(100)\n  contractAddress     String    @db.VarChar(100)\n  tokenId             String    @db.Text\n  count               Int\n  lastTransactionHash String?   @db.VarChar(100)\n  lastSyncTime        DateTime? @db.Timestamptz\n\n  // Virtual relation to NFTs via composite unique (contractAddress, tokenId)\n  nft NFTs? @relation(fields: [contractAddress, tokenId], references: [contractAddress, tokenId])\n\n  @@index([contractId])\n  @@index([ownerAddress, contractAddress, tokenId])\n  @@map(\"NFTOwners\")\n}\n\nmodel ContractLogs {\n  id              String   @id @default(uuid()) @db.Uuid\n  contractId      String   @db.Uuid\n  chainId         Int\n  contractAddress String   @db.VarChar(100)\n  blockNumber     String   @db.Text\n  transactionHash String   @db.VarChar(100)\n  logIndex        Int\n  eventType       String   @db.VarChar(50)\n  fromAddress     String?  @db.VarChar(100)\n  toAddress       String?  @db.VarChar(100)\n  operatorAddress String?  @db.VarChar(100)\n  tokenId         String?  @db.Text\n  value           String?  @db.Text\n  loggedAt        DateTime @db.Timestamptz\n\n  @@unique([transactionHash, logIndex])\n  @@index([contractId, blockNumber])\n  @@map(\"ContractLogs\")\n}\n\nmodel NFTs {\n  id                   String      @id @default(uuid()) @db.Uuid\n  contractId           String      @db.Uuid\n  contractAddress      String      @db.VarChar(100)\n  tokenId              String      @db.Text\n  tokenUri             String?     @db.Text\n  metadataUpdated      Boolean     @default(false)\n  lastMetadataSyncTime DateTime?   @db.Timestamptz\n  name                 String?     @db.Text\n  description          String?     @db.Text\n  image                String?     @db.Text\n  externalUrl          String?     @db.Text\n  attributes           Json?\n  raw                  Json?\n  NFTOwners            NFTOwners[]\n\n  @@unique([contractAddress, tokenId])\n  @@map(\"NFTs\")\n}\n",
  "inlineSchemaHash": "89c04c29658603489a9b13c3848ac6e8927b6a0cdbd0885ebbcaaaa9c3a3f81f",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"BlockchainConfigs\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chainId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rpcUrlBase\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rpcUrlAlter\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"BlockchainConfigs\"},\"BlockchainContracts\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contractAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contractType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chainId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastSyncBlock\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastSyncTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"BlockchainContracts\"},\"NFTOwners\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contractId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ownerAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contractAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"count\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastTransactionHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastSyncTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"nft\",\"kind\":\"object\",\"type\":\"NFTs\",\"relationName\":\"NFTOwnersToNFTs\"}],\"dbName\":\"NFTOwners\"},\"ContractLogs\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contractId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chainId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"contractAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"blockNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transactionHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"eventType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fromAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"toAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"operatorAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"loggedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"ContractLogs\"},\"NFTs\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contractId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contractAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenUri\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadataUpdated\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastMetadataSyncTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"externalUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attributes\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"raw\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"NFTOwners\",\"kind\":\"object\",\"type\":\"NFTOwners\",\"relationName\":\"NFTOwnersToNFTs\"}],\"dbName\":\"NFTs\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

